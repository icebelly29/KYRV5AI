interface MessageBubbleProps {
  role: 'user' | 'assistant';
  content: string;
  citations?: string;
  responseId?: string;
  timestamp: number;
}

export default function MessageBubble({ 
  role, 
  content, 
  citations, 
  responseId, 
  timestamp 
}: MessageBubbleProps) {
  const isUser = role === 'user';
  const avatar = isUser ? '👤' : '⚖️';
  const bgClass = isUser 
    ? 'gradient-user rounded-2xl rounded-tr-sm' 
    : 'bg-[var(--dark-gray)] border border-[var(--border-gray)] rounded-2xl rounded-tl-sm';
  const textClass = isUser ? 'text-white' : 'text-gray-200';
  const alignment = isUser ? 'justify-end' : '';

  // Format content with markdown-like styling
  const formatContent = (text: string) => {
    return text
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      .replace(/\*(.*?)\*/g, '<em>$1</em>')
      .replace(/\n/g, '<br>');
  };

  return (
    <div className="message animate-fadeIn">
      <div className={`flex items-start space-x-3 ${alignment}`}>
        {!isUser && (
          <div className="w-8 h-8 bg-gradient-to-br from-[var(--legal-blue)] to-[var(--accent-blue)] rounded-full flex items-center justify-center flex-shrink-0 mt-1">
            <span className="text-white text-sm">{avatar}</span>
          </div>
        )}
        
        <div className={`${bgClass} px-6 py-4 max-w-3xl`}>
          <div 
            className={`${textClass} leading-relaxed`}
            dangerouslySetInnerHTML={{ __html: formatContent(content) }}
          />
          
          {citations && (
            <div className="mt-4 bg-gray-800 rounded-lg p-3 border-l-4 border-[var(--accent-blue)]">
              <div className="text-xs text-gray-400 mb-2">
                <strong>Legal Sources:</strong> {citations}
              </div>
              {responseId && (
                <div className="text-xs text-gray-500 flex items-center space-x-2">
                  <span className="bg-green-500 w-2 h-2 rounded-full"></span>
                  <span>Response generated by GPT-4 | UK Legal Database | Verified 2024</span>
                  <span className="ml-auto">Response ID: {responseId}</span>
                </div>
              )}
            </div>
          )}
        </div>

        {isUser && (
          <div className="w-8 h-8 bg-gradient-to-br from-gray-600 to-gray-700 rounded-full flex items-center justify-center flex-shrink-0 mt-1">
            <span className="text-white text-sm">{avatar}</span>
          </div>
        )}
      </div>
    </div>
  );
}
